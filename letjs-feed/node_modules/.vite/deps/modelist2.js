import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/modelist2/dist/index.min.js
var require_index_min = __commonJS({
  "node_modules/modelist2/dist/index.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.modelist = e() : t.modelist = e();
    }(window, function() {
      return function(t) {
        var e = {};
        function r(n) {
          if (e[n])
            return e[n].exports;
          var o = e[n] = { i: n, l: false, exports: {} };
          return t[n].call(o.exports, o, o.exports, r), o.l = true, o.exports;
        }
        return r.m = t, r.c = e, r.d = function(t2, e2, n) {
          r.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: n });
        }, r.r = function(t2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        }, r.t = function(t2, e2) {
          if (1 & e2 && (t2 = r(t2)), 8 & e2)
            return t2;
          if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
            return t2;
          var n = /* @__PURE__ */ Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
            for (var o in t2)
              r.d(n, o, function(e3) {
                return t2[e3];
              }.bind(null, o));
          return n;
        }, r.n = function(t2) {
          var e2 = t2 && t2.__esModule ? function() {
            return t2.default;
          } : function() {
            return t2;
          };
          return r.d(e2, "a", e2), e2;
        }, r.o = function(t2, e2) {
          return Object.prototype.hasOwnProperty.call(t2, e2);
        }, r.p = "", r(r.s = 1);
      }({ "./src/index.js": function(t, e, r) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), Object.defineProperty(e, "Model", { enumerable: true, get: function() {
          return n.default;
        } }), Object.defineProperty(e, "List", { enumerable: true, get: function() {
          return o.default;
        } });
        var n = i(r("./src/model.js")), o = i(r("./src/list.js"));
        function i(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        }
      }, "./src/list.js": function(t, e, r) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.default = e.Modelist = void 0;
        var n = function(t2) {
          if (t2 && t2.__esModule)
            return t2;
          var e2 = {};
          if (null != t2) {
            for (var r2 in t2)
              if (Object.prototype.hasOwnProperty.call(t2, r2)) {
                var n2 = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(t2, r2) : {};
                n2.get || n2.set ? Object.defineProperty(e2, r2, n2) : e2[r2] = t2[r2];
              }
          }
          return e2.default = t2, e2;
        }(r("./src/model.js"));
        function o(t2, e2) {
          for (var r2 = 0; r2 < e2.length; r2++) {
            var n2 = e2[r2];
            n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t2, n2.key, n2);
          }
        }
        function i(t2) {
          return function(t3) {
            if (Array.isArray(t3)) {
              for (var e2 = 0, r2 = new Array(t3.length); e2 < t3.length; e2++)
                r2[e2] = t3[e2];
              return r2;
            }
          }(t2) || function(t3) {
            if (Symbol.iterator in Object(t3) || "[object Arguments]" === Object.prototype.toString.call(t3))
              return Array.from(t3);
          }(t2) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance");
          }();
        }
        function u(t2) {
          return (u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
            return typeof t3;
          } : function(t3) {
            return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
          })(t2);
        }
        var a = function(t2) {
          return t2 === n.default || n.default.prototype.isPrototypeOf(t2.prototype);
        }, s = (0, n.is)("List"), l = function(t2) {
          return !(t2 && t2.constructor && !hasOwnProperty.call(t2.constructor.prototype, "isPrototypeOf"));
        }, c = function(t2) {
          return !!(Array.isArray(t2) || s(t2) || t2 instanceof h);
        }, f = Symbol("ModelClass"), y = Symbol("proxy"), h = function() {
          function t2() {
            var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], r2 = arguments.length > 1 ? arguments[1] : void 0;
            if (function(t3, e3) {
              if (!(t3 instanceof e3))
                throw new TypeError("Cannot call a class as a function");
            }(this, t2), e2.length > 0 && !l(e2[0]) && !(e2[0] instanceof n.default))
              throw new Error("The first item of dataList is not an object or Model.");
            this.setCheckModel(t2.VALID_MODEL), this.setModelClass(r2, e2), this.setProxy(), this.init(e2);
          }
          return function(t3, e2, r2) {
            e2 && o(t3.prototype, e2), r2 && o(t3, r2);
          }(t2, [{ key: "init", value: function(t3) {
            return this.clear(), t3 && (this.getModelClass() || this.setModelClass(null, t3), this.add(t3)), this;
          } }, { key: "setModelClass", value: function(t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
            t3 && a(t3) || (e2[0] && a(e2[0].constructor) ? t3 = e2[0].constructor : void 0 !== u(n.default) && n.default.createModel && (t3 = function(t4, e3) {
              if ("object" === u(t4)) {
                for (var r2 = {}, o2 = Object.keys(t4), i2 = 0; i2 < o2.length; i2++)
                  r2[o2[i2]] = null;
                return n.default.createModel(r2, e3);
              }
            }(e2[0]))), (0, n.defineProperty)(this, f, t3, false);
          } }, { key: "getPrototype", value: function() {
            return Object.getPrototypeOf(this);
          } }, { key: "getModelClass", value: function() {
            return this[f];
          } }, { key: "setProxy", value: function() {
            (0, n.defineProperty)(this, y, (0, n.observeObject)(this), false);
          } }, { key: "getProxy", value: function() {
            return this[y];
          } }, { key: "onUpdate", value: function(t3, e2, r2, n2) {
          } }, { key: "addUpdateListener", value: function(t3) {
            return (0, n.addUpdateListener)(this, "Update", t3), this;
          } }, { key: "addFunction", value: function(t3, e2) {
            return "string" != typeof t3 || "function" != typeof e2 || "function" != typeof this[t3] ? (n.logger.error("override " + t3 + " function failed."), this) : ((0, n.defineProperty)(this, t3, e2, false), this);
          } }, { key: "getLength", value: function() {
            return this.length;
          } }, { key: "validModel", value: function(t3) {
            for (var e2 in this[0])
              if (this[0].hasOwnProperty(e2) && !t3.hasOwnProperty(e2))
                return false;
            return true;
          } }, { key: "add", value: function(e2) {
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : t2.VALID_MODEL;
            if (void 0 === e2 || null === e2)
              return this;
            for (var r2, o2 = c(e2) ? e2 : [e2], i2 = 0, a2 = o2.length; i2 < a2; i2++)
              "object" == u(r2 = o2[i2]) && (!this.isCheckModel || this.validModel(r2) ? (this.getModelClass() || this.setModelClass(null, [r2]), !this.getModelClass() || r2 instanceof this.getModelClass() || (r2 = new (this.getModelClass())(o2[i2])), this.getProxy().push(r2)) : n.logger.warn("The data is not exactly the same properties as the Model.", r2));
            return this;
          } }, { key: "setCheckModel", value: function(t3) {
            (0, n.defineProperty)(this, "isCheckModel", t3, false);
          } }, { key: "addAll", value: function(t3) {
            return this.add(t3);
          } }, { key: "format", value: function(t3) {
            for (var e2, r2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n2 = 0, o2 = this.length; n2 < o2; n2++)
              (e2 = this[n2]).getPrototype().format.call(e2, t3, r2);
            return this;
          } }, { key: "set", value: function(t3, e2) {
            return void 0 !== t3 && t3 < this.length && e2 && (e2 instanceof this.getModelClass() || (e2 = new (this.getModelClass())(e2)), this.getProxy()[t3] = e2), this;
          } }, { key: "insert", value: function(t3, e2) {
            return e2 instanceof this.getModelClass() || (e2 = new (this.getModelClass())(e2)), this.getProxy().splice(t3, 0, e2), this;
          } }, { key: "get", value: function(t3) {
            return this.getProxy()[t3];
          } }, { key: "getBy", value: function(t3) {
            var e2 = this;
            if ("function" == typeof t3) {
              var r2 = new this.constructor();
              return this.every(function(n2, o2) {
                return true === t3.call(e2, n2, o2, e2) && r2.add(n2), true;
              }), r2;
            }
          } }, { key: "getByKey", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            return Array.isArray(e2[0]) && (e2 = e2[0]), this.getBy(function(t4, r3, n2) {
              var o2 = false;
              return e2.every(function(e3) {
                return !t4.hasOwnProperty(e3) || (o2 = true, false);
              }), o2;
            });
          } }, { key: "getByValue", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            return Array.isArray(e2[0]) && (e2 = e2[0]), this.getBy(function(t4, r3, n2) {
              var o2 = false;
              return t4.each(function(t5, r4, n3) {
                if (e2.includes(r4))
                  return o2 = true, false;
              }), o2;
            });
          } }, { key: "getByKeyValue", value: function(t3, e2) {
            return this.getBy(function(r2) {
              return r2[t3] === e2;
            });
          } }, { key: "getValues", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            return Array.isArray(e2[0]) && (e2 = e2[0]), this.map(function(t4) {
              return e2.length ? t4.getPrototype().get.call(t4, e2) : t4.getPrototype().getValues.call(t4);
            });
          } }, { key: "hasItem", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            Array.isArray(e2[0]) && (e2 = e2[0]);
            var n2 = true, o2 = false, i2 = void 0;
            try {
              for (var u2, a2 = e2[Symbol.iterator](); !(n2 = (u2 = a2.next()).done); n2 = true) {
                var s2 = u2.value;
                if (!this.contains(s2))
                  return false;
              }
            } catch (t4) {
              o2 = true, i2 = t4;
            } finally {
              try {
                n2 || null == a2.return || a2.return();
              } finally {
                if (o2)
                  throw i2;
              }
            }
            return true;
          } }, { key: "contains", value: function(t3, e2) {
            var r2 = this;
            return e2 = e2 || function(t4, e3, r3) {
              return t4 === r3 || t4.getPrototype().equals.call(t4, r3);
            }, this.some(function(n2, o2) {
              return e2.call(r2, n2, o2, t3, r2);
            });
          } }, { key: "indexOfBy", value: function(t3) {
            var e2 = 0, r2 = this.length;
            for (t3 = t3 || function(t4, e3) {
              return false;
            }; e2 < r2; ) {
              if (true === t3.call(this, this[e2], e2, this))
                return e2;
              e2++;
            }
            return -1;
          } }, { key: "indexOfByKey", value: function(t3, e2) {
            return this.indexOfBy(function(r2) {
              return r2[t3] === e2;
            });
          } }, { key: "each", value: function(t3) {
            if ("function" == typeof t3)
              return this.forEach(t3), this;
          } }, { key: "remove", value: function(t3, e2) {
            return this.length <= 0 ? this : (t3 = t3 < 0 ? 0 : t3, e2 = e2 || t3 + 1, this.getProxy().splice(t3, e2 - t3), this);
          } }, { key: "removeItem", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            return Array.isArray(e2[0]) && (e2 = e2[0]), this.removeBy(function(t4, r3) {
              return e2.includes(t4);
            });
          } }, { key: "removeBy", value: function(t3) {
            for (var e2 = 0, r2 = this.length; e2 < r2; e2++)
              true === t3.call(this, this[e2], e2, this) && (this.getProxy().splice(e2, 1), r2--, e2--);
            return this;
          } }, { key: "replaceBy", value: function(t3, e2) {
            for (var r2 = 0, n2 = this.length; r2 < n2; r2++)
              true === e2.call(this, this[r2], r2, this) && (t3 instanceof this.getModelClass() || (t3 = new (this.getModelClass())(t3)), this[r2] = t3);
            return this;
          } }, { key: "removeByKeyValue", value: function(t3, e2) {
            return this.removeBy(function(r2) {
              return r2[t3] === e2;
            });
          } }, { key: "inverse", value: function(t3) {
            var e2 = this;
            if ("function" == typeof t3) {
              var r2 = new this.constructor();
              return this.forEach(function(n2, o2) {
                true !== t3.call(e2, n2, o2, e2) && r2.add(n2);
              }), r2;
            }
          } }, { key: "empty", value: function() {
            return this.remove(0, this.length), this;
          } }, { key: "clear", value: function() {
            for (var t3 in this.empty(), this)
              delete this[t3];
            return this;
          } }, { key: "isEmpty", value: function() {
            return 0 === this.length;
          } }, { key: "equals", value: function(t3) {
            return !(!c(t3) || t3.length !== this.length) && this.every(function(e2, r2) {
              return e2.getPrototype().equals.call(e2, t3[r2]);
            });
          } }, { key: "unique", value: function() {
            return this.uniqueBy(function(t3, e2) {
              return t3.equals(e2);
            });
          } }, { key: "uniqueBy", value: function(t3) {
            t3 = t3 || function() {
              return false;
            };
            for (var e2 = this.length; e2-- > 0; )
              for (var r2 = 0; r2 < e2; r2++)
                if (true === t3(this[e2], this[r2])) {
                  this.splice(e2, 1);
                  break;
                }
            return this;
          } }, { key: "uniqueByKey", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            return Array.isArray(e2[0]) && (e2 = e2[0]), this.uniqueBy(function(t4, r3) {
              return e2.every(function(e3, n2) {
                return t4[e3] === r3[e3];
              });
            });
          } }, { key: "groupBy", value: function(t3, e2) {
            var r2 = this, n2 = {};
            return e2 = e2 || function(t4, e3) {
              return true;
            }, this.forEach(function(o2, i2) {
              true === e2.call(r2, o2, i2, r2) && (n2[o2[t3]] = n2[o2[t3]] || [], n2[o2[t3]].push(o2));
            }), n2;
          } }, { key: "countBy", value: function(t3) {
            var e2 = this, r2 = 0;
            return t3 = t3 || function(t4, e3) {
              return false;
            }, this.forEach(function(n2, o2) {
              true === t3.call(e2, n2, o2) && r2++;
            }), r2;
          } }, { key: "sortBy", value: function(t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "asc";
            return this.sort(function(r2, n2) {
              var o2 = r2[t3], i2 = n2[t3];
              return void 0 === o2 || null === o2 ? "desc" == e2 ? 1 : -1 : void 0 === i2 || null === i2 ? "desc" == e2 ? -1 : 1 : o2 > i2 ? "desc" == e2 ? -1 : 1 : o2 < i2 ? "desc" == e2 ? 1 : -1 : 0;
            }), this;
          } }, { key: "swap", value: function(t3, e2) {
            t3 < 0 ? t3 = 0 : t3 > this.length - 1 && (t3 = this.length - 1), e2 < 0 ? e2 = 0 : e2 > this.length - 1 && (e2 = this.length - 1);
            var r2 = this[t3], n2 = this[e2];
            return this.length > e2 && (this.splice(e2, 1, r2), this.splice(t3, 1, n2)), this;
          } }, { key: "clone", value: function() {
            var t3 = new this.constructor();
            return this.forEach(function(e2) {
              e2 instanceof n.default && t3.add(e2.getPrototype().clone.call(e2));
            }), t3;
          } }, { key: "toPlain", value: function() {
            var t3 = Array.from(this);
            return t3.map(function(e2, r2) {
              t3[r2] = t3[r2] && "function" == typeof t3[r2].toPlain ? t3[r2].toPlain() : t3[r2];
            }), t3;
          } }, { key: "toString", value: function() {
            try {
              return JSON.stringify(this.toPlain());
            } catch (t3) {
              n.logger.error(t3);
            }
          } }, { key: "toJSON", value: function() {
            var t3 = Array.from(this);
            return t3.forEach(function(e2, r2) {
              t3[r2] = e2 && "function" == typeof e2.toJSON ? e2.toJSON() : e2;
            }), t3;
          } }, { key: "toArray", value: function() {
            return Array.from(this);
          } }, { key: Symbol.toStringTag, get: function() {
            return "List";
          } }]), t2;
        }();
        !function(t2) {
          var e2 = [];
          e2 = i(Object.getOwnPropertyNames(Object.getPrototypeOf([])));
          var r2 = true, o2 = false, u2 = void 0;
          try {
            for (var a2, s2 = e2[Symbol.iterator](); !(r2 = (a2 = s2.next()).done); r2 = true) {
              var l2 = a2.value;
              "constructor" === l2 || "length" === l2 || t2.prototype.hasOwnProperty(l2) || (0, n.defineProperty)(t2.prototype, l2, Array.prototype[l2], false);
            }
          } catch (t3) {
            o2 = true, u2 = t3;
          } finally {
            try {
              r2 || null == s2.return || s2.return();
            } finally {
              if (o2)
                throw u2;
            }
          }
          (0, n.defineProperty)(t2.prototype, "length", 0, false), (0, n.defineProperty)(t2.prototype, Symbol.iterator, Array.prototype[Symbol.iterator], false);
        }(h), h.VALID_MODEL = false;
        var v = h;
        e.Modelist = v;
        var p = h;
        e.default = p;
      }, "./src/model.js": function(t, e, r) {
        "use strict";
        function n(t2, e2) {
          return (n = Object.setPrototypeOf || function(t3, e3) {
            return t3.__proto__ = e3, t3;
          })(t2, e2);
        }
        function o(t2, e2, r2) {
          return (o = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, r3) {
            var n2 = function(t4, e4) {
              for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = i(t4)); )
                ;
              return t4;
            }(t3, e3);
            if (n2) {
              var o2 = Object.getOwnPropertyDescriptor(n2, e3);
              return o2.get ? o2.get.call(r3) : o2.value;
            }
          })(t2, e2, r2 || t2);
        }
        function i(t2) {
          return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
            return t3.__proto__ || Object.getPrototypeOf(t3);
          })(t2);
        }
        function u(t2) {
          if (void 0 === t2)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t2;
        }
        function a(t2, e2) {
          if (!(t2 instanceof e2))
            throw new TypeError("Cannot call a class as a function");
        }
        function s(t2, e2) {
          for (var r2 = 0; r2 < e2.length; r2++) {
            var n2 = e2[r2];
            n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t2, n2.key, n2);
          }
        }
        function l(t2) {
          return (l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
            return typeof t3;
          } : function(t3) {
            return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
          })(t2);
        }
        function c() {
          var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Object";
          return function(e2) {
            var r2 = "[object " + t2 + "]";
            return Object.prototype.toString.call(e2) == r2;
          };
        }
        Object.defineProperty(e, "__esModule", { value: true }), e.is = c, e.defineProperty = p, e.format = d, e.addUpdateListener = g, e.observeObject = b, e.default = e.logger = void 0;
        var f = c("Object"), y = c("Model"), h = c("List"), v = function(t2) {
          return Array.isArray(t2) || h(t2);
        };
        function p(t2, e2, r2, n2, o2) {
          Object.defineProperty(t2, e2, Object.assign({ value: r2, enumerable: !!n2, writable: true, configurable: true }, o2));
        }
        function d(t2, e2) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (f(e2)) {
            for (var n2 in e2)
              if (v(e2[n2]) && e2[n2].length > 0) {
                var o2 = r2, i2 = true, u2 = false, a2 = void 0;
                try {
                  for (var s2, l2 = e2[n2][Symbol.iterator](); !(i2 = (s2 = l2.next()).done); i2 = true) {
                    var c2 = s2.value;
                    if (!f(o2) && !v(o2)) {
                      o2 = t2[n2];
                      break;
                    }
                    o2 = o2[c2];
                  }
                } catch (t3) {
                  u2 = true, a2 = t3;
                } finally {
                  try {
                    i2 || null == l2.return || l2.return();
                  } finally {
                    if (u2)
                      throw a2;
                  }
                }
                t2[n2] = o2;
              } else
                t2[n2] = "function" == typeof e2[n2] ? e2[n2].call(t2, r2, t2, e2) : e2[n2];
            return t2;
          }
          k.warn("formatter is no an object.");
        }
        function g(t2, e2, r2) {
          p(t2, "on" + e2, r2, false);
        }
        function b(t2) {
          return function t3(e2, r2) {
            var n2 = this;
            return new Proxy(r2, { set: function(t4, o2, i2, u2) {
              if ("symbol" === l(o2))
                return true;
              var a2 = o2 && o2.get;
              return o2 && o2.set, i2 = a2 ? a2.call(n2) : i2, t4[o2] = i2, r2.onUpdate.call(r2, e2 + o2, i2, t4, u2), true;
            }, get: function(o2, i2, u2) {
              var a2 = i2 && i2.get, s2 = (i2 && i2.set, a2 ? a2.call(n2) : o2[i2]);
              return f(s2) && r2.hasOwnProperty(s2) ? t3(e2 + i2 + ".", s2) : s2;
            } });
          }("", t2);
        }
        var k = console || {};
        e.logger = k, k.INFO_ON = false, k.INFO_ON ? k.info = console.info : k.info = function() {
        };
        var P = Symbol("proxy"), m = Symbol("formatter"), O = function() {
          function t2() {
            a(this, t2), p(this, P, b(this), false), p(this, m, {}, false);
          }
          return function(t3, e2, r2) {
            e2 && s(t3.prototype, e2), r2 && s(t3, r2);
          }(t2, [{ key: "define", value: function(t3) {
            for (var e2 in t3)
              t3.hasOwnProperty(e2) && (this[e2] = t3[e2]);
          } }, { key: "init", value: function(t3, e2) {
            var r2 = this;
            if (!f(t3) && !y(t3))
              return k.warn("the source is not Object type"), this;
            p(this, "__source__", t3, false, { writable: false }), this.getPrototype().setFormatter.call(this, e2, false);
            var n2 = this.preprocess(t3, e2);
            return this.each(function(e3) {
              r2.hasOwnProperty(e3) && void 0 !== t3[e3] && r2.getPrototype().set.call(r2, e3, t3[e3]);
            }), false !== n2 && this.getPrototype().format.call(this), this;
          } }, { key: "getPrototype", value: function() {
            return Object.getPrototypeOf(this);
          } }, { key: "getProxy", value: function() {
            return this[P];
          } }, { key: "getSource", value: function() {
            return this.__source__;
          } }, { key: "getFormatter", value: function() {
            return this[m];
          } }, { key: "addFormatter", value: function(t3) {
            return this.getPrototype().setFormatter.call(this, t3, false);
          } }, { key: "setFormatter", value: function(t3) {
            return !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1] ? this[m] = t3 : Object.assign(this.getPrototype().getFormatter.call(this), t3), this;
          } }, { key: "preprocess", value: function(t3, e2) {
            return true;
          } }, { key: "format", value: function(t3) {
            var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
            return t3 && e2 && Object.assign(this.getPrototype().getFormatter.call(this), t3), t3 = e2 ? this.getPrototype().getFormatter.call(this) : t3, d(this.getProxy(), t3, this.getSource()), this.getPrototype().formatted.call(this, t3), this;
          } }, { key: "formatted", value: function() {
            for (var t3 = arguments.length, e2 = new Array(t3), r2 = 0; r2 < t3; r2++)
              e2[r2] = arguments[r2];
            k.info("%c%s", "color: blue;", "Model formatted:", arguments);
          } }, { key: "onUpdate", value: function(t3, e2, r2, n2) {
            k.info("%c%s", "color: red;", "Model onUpdate:", arguments);
          } }, { key: "addUpdateListener", value: function(t3) {
            return g(this, "Update", t3), this;
          } }, { key: "addFunction", value: function(t3, e2) {
            return "string" != typeof t3 || "function" != typeof e2 || "function" != typeof this[t3] ? this : (p(this, t3, e2, false), this);
          } }, { key: "each", value: function(t3) {
            if ("function" == typeof t3) {
              for (var e2 in this)
                if (this.hasOwnProperty(e2) && false === t3.call(this, e2, this[e2], this))
                  break;
              return this;
            }
          } }, { key: "set", value: function(t3, e2) {
            return this.getProxy()[t3] = e2, this;
          } }, { key: "add", value: function(t3, e2) {
            return this.hasOwnProperty(t3) || this.getPrototype().set.call(this, t3, e2), this;
          } }, { key: "addAll", value: function(t3) {
            for (var e2 in t3)
              this.add(e2, t3[e2]);
            return this;
          } }, { key: "get", value: function() {
            for (var t3 = this, e2 = arguments.length, r2 = new Array(e2), n2 = 0; n2 < e2; n2++)
              r2[n2] = arguments[n2];
            if (Array.isArray(r2[0]) && (r2 = r2[0]), r2.length <= 1)
              return this.getProxy()[r2];
            var o2 = [];
            return r2.every(function(e3) {
              return t3.hasOwnProperty(e3) && o2.push(t3[e3]), true;
            }), this.onUpdate(r2, o2, this, this.getProxy()), o2;
          } }, { key: "getBy", value: function(t3) {
            var e2 = this, r2 = [];
            if ("function" == typeof t3)
              return this.getPrototype().each.call(this, function(n2, o2) {
                true === t3.call(e2, n2, o2, e2) && r2.push(o2);
              }), this.onUpdate(t3, r2, this, this.getProxy()), r2;
          } }, { key: "getLength", value: function() {
            return this.getPrototype().getKeys.call(this).length;
          } }, { key: "empty", value: function() {
            var t3 = this;
            return this.getPrototype().each.call(this, function(e2) {
              t3.getPrototype().removeKey.call(t3, e2);
            }), this;
          } }, { key: "getKeys", value: function() {
            return Object.keys(this);
          } }, { key: "getValues", value: function() {
            return Object.values(this);
          } }, { key: "getEntries", value: function() {
            return Object.entries(this);
          } }, { key: "hasKey", value: function() {
            for (var t3 = this, e2 = arguments.length, r2 = new Array(e2), n2 = 0; n2 < e2; n2++)
              r2[n2] = arguments[n2];
            return void 0 !== r2 && (Array.isArray(r2[0]) && (r2 = r2[0]), r2.every(function(e3) {
              return !!t3.hasOwnProperty(e3);
            }));
          } }, { key: "hasValue", value: function() {
            for (var t3, e2 = this, r2 = arguments.length, n2 = new Array(r2), o2 = 0; o2 < r2; o2++)
              n2[o2] = arguments[o2];
            return void 0 !== n2 && (Array.isArray(n2[0]) && (n2 = n2[0]), n2.every(function(r3) {
              return t3 = false, e2.getPrototype().each.call(e2, function(e3, n3) {
                if (r3 !== n3) {
                  if (void 0 !== n3) {
                    if (Array.isArray(r3) && r3.toString() === n3.toString())
                      return void (t3 = true);
                    if (f(r3) && JSON.stringify(r3) === JSON.stringify(n3))
                      return void (t3 = true);
                  }
                } else
                  t3 = true;
              }), t3;
            }));
          } }, { key: "hasKeyValue", value: function(t3, e2) {
            return this[t3] === e2;
          } }, { key: "removeBy", value: function(t3) {
            var e2 = this;
            if ("function" == typeof t3)
              return this.getPrototype().each.call(this, function(r2, n2) {
                true === t3.call(e2, r2, n2, e2) && delete e2.getProxy()[r2];
              }), this;
          } }, { key: "removeKey", value: function() {
            for (var t3 = this, e2 = arguments.length, r2 = new Array(e2), n2 = 0; n2 < e2; n2++)
              r2[n2] = arguments[n2];
            return Array.isArray(r2[0]) && (r2 = r2[0]), r2.forEach(function(e3) {
              delete t3.getProxy()[e3];
            }), this;
          } }, { key: "removeValue", value: function() {
            for (var t3 = this, e2 = arguments.length, r2 = new Array(e2), n2 = 0; n2 < e2; n2++)
              r2[n2] = arguments[n2];
            return Array.isArray(r2[0]) && (r2 = r2[0]), this.getPrototype().each.call(this, function(e3, n3) {
              r2.includes(n3) && delete t3.getProxy()[e3];
            }), this;
          } }, { key: "filter", value: function(t3) {
            if ("function" == typeof t3) {
              var e2 = {};
              for (var r2 in this)
                true === t3.call(this, r2, this[r2], this) && (e2[r2] = this[r2]);
              return e2;
            }
          } }, { key: "equals", value: function(t3) {
            if (t3 === this)
              return true;
            if (l(t3) !== l(this) || void 0 === t3 || null === t3)
              return false;
            if (Object.keys(t3).length !== this.getLength())
              return false;
            try {
              return this.toString() === JSON.stringify(t3);
            } catch (e2) {
              return k.error(t3, this, " equals error."), false;
            }
          } }, { key: "clone", value: function() {
            var t3 = this, e2 = new this.constructor(this);
            return this.each(function(r2) {
              return e2[r2] = t3[r2];
            }), e2;
          } }, { key: "toString", value: function() {
            try {
              return JSON.stringify(this.toPlain());
            } catch (t3) {
              k.error("toString error:", t3);
            }
          } }, { key: "toPlain", value: function() {
            var e2 = function(t3) {
              var e3 = [];
              return t3.forEach(function(t4, r3) {
                e3[r3] = n2(t4);
              }), e3;
            }, r2 = function(t3) {
              var e3 = {};
              for (var r3 in t3)
                t3.hasOwnProperty(r3) && (e3[r3] = n2(t3[r3]));
              return e3;
            }, n2 = function(n3) {
              return v(n3) ? e2(n3) : f(n3) || n3 instanceof t2 ? r2(n3) : n3;
            };
            try {
              return n2(this);
            } catch (t3) {
              k.error("toPlain error:", t3);
            }
          } }, { key: "toJSON", value: function() {
            try {
              return function e2(r2) {
                if (void 0 !== r2) {
                  var n2;
                  if ("string" == typeof r2 || "number" == typeof r2 || null === r2 || "boolean" == typeof r2)
                    n2 = r2;
                  else if (v(r2))
                    n2 = [], r2.forEach(function(t3, r3) {
                      void 0 !== t3 && (n2[r3] = e2(t3));
                    });
                  else if (f(r2) || r2 instanceof t2)
                    for (var o2 in n2 = {}, r2)
                      r2.hasOwnProperty(o2) && void 0 !== r2[o2] && (n2[o2] = e2(r2[o2]));
                  else
                    null !== r2 && void 0 !== r2 && (n2 = r2.toString());
                  return n2;
                }
              }(this);
            } catch (t3) {
              k.error("toJSON error:", t3);
            }
          } }, { key: Symbol.toStringTag, get: function() {
            return "Model";
          } }], [{ key: "createModel", value: function(e2, r2, s2) {
            return function(c2) {
              function f2(t3, n2) {
                var c3;
                for (var y2 in a(this, f2), c3 = function(t4, e3) {
                  return !e3 || "object" !== l(e3) && "function" != typeof e3 ? u(t4) : e3;
                }(this, i(f2).call(this)), o(i(f2.prototype), "define", u(c3)).call(u(c3), e2), s2)
                  o(i(f2.prototype), "addFunction", u(c3)).call(u(c3), y2, s2[y2]);
                return o(i(f2.prototype), "init", u(c3)).call(u(u(c3)), t3, Object.assign(r2 || {}, n2)), c3;
              }
              return function(t3, e3) {
                if ("function" != typeof e3 && null !== e3)
                  throw new TypeError("Super expression must either be null or a function");
                t3.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t3, writable: true, configurable: true } }), e3 && n(t3, e3);
              }(f2, t2), f2;
            }();
          } }]), t2;
        }();
        e.default = O;
      }, 1: function(t, e, r) {
        t.exports = r("./src/index.js");
      } });
    });
  }
});

// dep:modelist2
var modelist2_default = require_index_min();
export {
  modelist2_default as default
};
//# sourceMappingURL=modelist2.js.map
